# .github/workflows/main.yml

name: lsl-tools

# Controls when the workflow will run
on:
  push:
  pull_request:
    branches: [ "main" ]

jobs:

  type-check: 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install and run mypy
        run: |
          pip install .[dev]
          mypy ./

  lint: 
    # needs: type-check # Runs after type checking
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]

      - name: Run linters
        run: |
          black --check .
          isort --check-only .

      - name: Run flake8
        run: flake8 . --max-line-length=120 --ignore=E203,E501,W503,F401,F403

  test:
    # needs: lint # Runs after linting is successful
    runs-on: ${{ matrix.os }} 
    strategy:
      # Don't cancel all jobs if one fails
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        # Use the Python versions specified in your pyproject.toml
        python-version: ['3.8', '3.9', '3.10', '3.11']  # Add this line

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install LSL library
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            # Install build dependencies
            sudo apt-get update
            sudo apt-get install -y build-essential cmake git
            
            # Clone, build, and install liblsl from source
            git clone --recursive https://github.com/sccn/liblsl.git
            cd liblsl
            mkdir build && cd build
            cmake ..
            make
            sudo make install
            
            # Update linker cache
            sudo ldconfig
            
          elif [ "$RUNNER_OS" == "Windows" ]; then
            # Clone and build liblsl from source
            git clone --recursive https://github.com/sccn/liblsl.git
            cd liblsl
            mkdir build && cd build
            
            # Configure and build using CMake
            cmake ..
            cmake --build . --config Release
            
            # Install the library and add its bin directory to the PATH
            cmake --build . --config Release --target install
            echo "C:\Program Files (x86)\lsl\bin" >> $GITHUB_PATH
            
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install labstreaminglayer/tap/lsl
            echo "DYLD_LIBRARY_PATH=$(brew --prefix)/lib" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install the package with test and dev dependencies
          pip install .[test,dev]

      - name: Run tests with coverage
        run: |
          # Run unittest via coverage to collect statistics
          coverage run -m unittest discover

      - name: Generate coverage report
        run: |
          # Generate a text report to the console
          coverage report -m
          # Generate an XML report for external tools
          coverage xml

      - name: Upload coverage to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.os }}-py${{ matrix.python-version }}
          path: coverage.xml

  build:
    # needs: test # Runs after tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          # The 'build' and 'twine' packages are in the 'release' extras
          pip install .[release]

      - name: Build package
        run: python -m build

      - name: Check package with twine
        run: twine check dist/*

      - name: Upload distribution package
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
